// *****************************************************************************
//
// Copyright (C) 2013 All Right Reserved, Southwest Research Institute® (SwRI®)
//
// Contract No.  10-58058A
// Contractor    Southwest Research Institute® (SwRI®)
// Address       6220 Culebra Road, San Antonio, Texas 78228-0510
// Contact       Steve Dellenback <sdellenback@swri.org> (210) 522-3914
//
// This code was developed as part of an internal research project fully funded
// by Southwest Research Institute®.
//
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
// KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// *****************************************************************************

#ifndef MAPVIZ_PLUGINS_PATH_PLUGIN_H_
#define MAPVIZ_PLUGINS_PATH_PLUGIN_H_

// C++ standard libraries
#include <string>
#include <list>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QWidget>
#include <QColor>

// ROS libraries
#include <ros/ros.h>
#include <tf/transform_datatypes.h>
#include <nav_msgs/Path.h>

#include <mapviz/mapviz_plugin.h>
#include <mapviz/map_canvas.h>

// QT autogenerated files
#include "ui_path_config.h"
#include "ui_topic_select.h"

namespace mapviz_plugins
{
  class PathPlugin : public mapviz::MapvizPlugin
  {
    Q_OBJECT

  public:
    PathPlugin();
    virtual ~PathPlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown() {}

    void Draw(double x, double y, double scale);

    void Transform();

    void LoadConfig(const YAML::Node& node, const std::string& path);
    void SaveConfig(YAML::Emitter& emitter, const std::string& path);

    QWidget* GetConfigWidget(QWidget* parent);

  protected:
    void PrintError(const std::string& message);
    void PrintInfo(const std::string& message);
    void PrintWarning(const std::string& message);

  protected Q_SLOTS:
    void SelectTopic();
    void TopicEdited();

  private:
    Ui::path_config ui_;
    QWidget* config_widget_;

    std::string topic_;

    ros::Subscriber path_sub_;
    bool has_message_;

    ros::Time stamp_;

    std::list<tf::Point> points_;
    std::list<tf::Point> transformed_points_;

    bool transformed_;

    QColor color_;
    float line_width_;

    void pathCallback(const nav_msgs::PathConstPtr path);
  };
}

#endif  // MAPVIZ_PLUGINS_PATH_PLUGIN_H_
