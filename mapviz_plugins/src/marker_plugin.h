#ifndef MARKER_PLUGIN_H
#define MARKER_PLUGIN_H

// C++ standard libraries
#include <string>
#include <list>
#include <map>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QWidget>
#include <QColor>

// ROS libraries
#include <ros/ros.h>
#include <tf/transform_datatypes.h>
#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>
#include <std_msgs/ColorRGBA.h>

#include <mapviz/mapviz_plugin.h>
#include <mapviz/map_canvas.h>

// QT autogenerated files
#include "ui_marker_config.h"
#include "ui_topic_select.h"

namespace mapviz_plugins
{

  class MarkerPlugin : public mapviz::MapvizPlugin
  {

    Q_OBJECT

  public:

    MarkerPlugin();
    virtual ~MarkerPlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown() {}

    void Draw(double x, double y, double scale);

    void Transform();

    void LoadConfiguration(const YAML::Node& node);
    void SaveConfiguration(YAML::Emitter& emitter);

    QWidget* GetConfigWidget(QWidget* parent);

  protected:
    void PrintError(const std::string& message);
    void PrintInfo(const std::string& message);
    void PrintWarning(const std::string& message);

  protected Q_SLOTS:
    void SelectTopic();
    void TopicEdited();

  private:

    struct MarkerData
    {
      ros::Time expire_time_;

      int display_type_;
      QColor color_;

      std::list<tf::Point> points_;
      std::list<tf::Point> transformed_points_;
      std::list<QColor> colors_;

      float scale_x_;
      float scale_y_;
      float scale_z_;
    };

    QGLWidget* canvas_;

    Ui::marker_config ui_;
    QWidget* config_widget_;

    std::string topic_;

    ros::Subscriber marker_sub_;
    bool has_message_;

    std::map<int, MarkerData> markers_;

    bool is_marker_array_;

    void markerCallback(const visualization_msgs::MarkerConstPtr odometry);
    void markerArrayCallback(const visualization_msgs::MarkerArrayConstPtr markers);
  };
}

#endif /* MARKER_PLUGIN_H */
