#ifndef PATH_PLUGIN_H
#define PATH_PLUGIN_H

// C++ standard libraries
#include <string>
#include <list>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QWidget>
#include <QColor>

// ROS libraries
#include <ros/ros.h>
#include <tf/transform_datatypes.h>
#include <nav_msgs/Path.h>

#include <mapviz/mapviz_plugin.h>
#include <mapviz/map_canvas.h>

// QT autogenerated files
#include "ui_path_config.h"
#include "ui_topic_select.h"

namespace mapviz_plugins
{

  class PathPlugin : public mapviz::MapvizPlugin
  {

    Q_OBJECT

  public:

    PathPlugin();
    virtual ~PathPlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown() {}

    void Draw(double x, double y, double scale);

    void Transform();

    void LoadConfiguration(const YAML::Node& node, const std::string& config_path);
    void SaveConfiguration(YAML::Emitter& emitter, const std::string& config_path);

    QWidget* GetConfigWidget(QWidget* parent);

  protected:
    void PrintError(const std::string& message);
    void PrintInfo(const std::string& message);
    void PrintWarning(const std::string& message);

  protected Q_SLOTS:
    void SelectTopic();
    void TopicEdited();

  private:
    QGLWidget* canvas_;

    Ui::path_config ui_;
    QWidget* config_widget_;

    std::string topic_;

    ros::Subscriber path_sub_;
    bool has_message_;

    std::list<tf::Point> points_;
    std::list<tf::Point> transformed_points_;
    QColor color_;
    float line_width_;

    void pathCallback(const nav_msgs::PathConstPtr path);
  };
}

#endif /* PATH_PLUGIN_H */
