#ifndef ROBOT_IMAGE_PLUGIN_H
#define ROBOT_IMAGE_PLUGIN_H

// C++ standard libraries
#include <string>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QWidget>

// ROS libraries
#include <ros/ros.h>
#include <tf/transform_datatypes.h>

#include <mapviz/mapviz_plugin.h>
#include <mapviz/map_canvas.h>

// QT autogenerated files
#include "ui_robot_image_config.h"
#include "ui_topic_select.h"

namespace mapviz_plugins
{

  class RobotImagePlugin : public mapviz::MapvizPlugin
  {

    Q_OBJECT

  public:

    RobotImagePlugin();
    virtual ~RobotImagePlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown() {}

    void Draw(double x, double y, double scale);

    void Transform();

    void LoadConfiguration(const YAML::Node& node);
    void SaveConfiguration(YAML::Emitter& emitter);

    QWidget* GetConfigWidget(QWidget* parent);

  protected:
    void PrintError(const std::string& message);
    void PrintInfo(const std::string& message);
    void PrintWarning(const std::string& message);

  protected Q_SLOTS:
    void SelectFile();
    void SelectFrame();
    void FrameEdited();
    void WidthChanged(double value);
    void HeightChanged(double value);

  private:
    QGLWidget* canvas_;

    Ui::robot_image_config ui_;
    QWidget* config_widget_;

    double width_;
    double height_;

    std::string filename_;
    QImage      image_;
    int dimension_;
    int texture_id_;
    bool texture_loaded_;

    tf::Point top_left_;
    tf::Point top_right_;
    tf::Point bottom_left_;
    tf::Point bottom_right_;

    tf::Point top_left_transformed_;
    tf::Point top_right_transformed_;
    tf::Point bottom_left_transformed_;
    tf::Point bottom_right_transformed_;

    void UpdateShape();
    void LoadImage();
  };
}

#endif /* ROBOT_IMAGE_PLUGIN_H */
